--
-- Script was generated by Devart dbForge Studio for MySQL, Version 8.0.40.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 23-Jan-21 2:36:44 PM
-- Server version: 8.0.17
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Set default database
--
USE inventory_management;

--
-- Drop procedure `insert_category`
--
DROP PROCEDURE IF EXISTS insert_category;

--
-- Drop procedure `insert_issue`
--
DROP PROCEDURE IF EXISTS insert_issue;

--
-- Drop table `invoice_temp`
--
DROP TABLE IF EXISTS invoice_temp;

--
-- Drop table `product_status_detail_temp`
--
DROP TABLE IF EXISTS product_status_detail_temp;

--
-- Drop table `vat_detail_temp`
--
DROP TABLE IF EXISTS vat_detail_temp;

--
-- Drop procedure `insert_issue_detail`
--
DROP PROCEDURE IF EXISTS insert_issue_detail;

--
-- Drop procedure `insert_product_detail`
--
DROP PROCEDURE IF EXISTS insert_product_detail;

--
-- Drop procedure `update_issue_detail`
--
DROP PROCEDURE IF EXISTS update_issue_detail;

--
-- Drop procedure `update_product_detail`
--
DROP PROCEDURE IF EXISTS update_product_detail;

--
-- Drop table `product_detail_pt`
--
DROP TABLE IF EXISTS product_detail_pt;

--
-- Drop procedure `insert_shelf`
--
DROP PROCEDURE IF EXISTS insert_shelf;

--
-- Drop procedure `update_shelf`
--
DROP PROCEDURE IF EXISTS update_shelf;

--
-- Drop table `shelf`
--
DROP TABLE IF EXISTS shelf;

--
-- Drop table `auth`
--
DROP TABLE IF EXISTS auth;

--
-- Drop table `menu`
--
DROP TABLE IF EXISTS menu;

--
-- Drop table `user_role`
--
DROP TABLE IF EXISTS user_role;

--
-- Drop table `role`
--
DROP TABLE IF EXISTS role;

--
-- Drop table `issue_detail`
--
DROP TABLE IF EXISTS issue_detail;

--
-- Drop procedure `update_issue`
--
DROP PROCEDURE IF EXISTS update_issue;

--
-- Drop table `issue`
--
DROP TABLE IF EXISTS issue;

--
-- Drop procedure `insert_customer`
--
DROP PROCEDURE IF EXISTS insert_customer;

--
-- Drop procedure `update_customer`
--
DROP PROCEDURE IF EXISTS update_customer;

--
-- Drop table `customer`
--
DROP TABLE IF EXISTS customer;

--
-- Drop table `product_detail`
--
DROP TABLE IF EXISTS product_detail;

--
-- Drop table `invoice`
--
DROP TABLE IF EXISTS invoice;

--
-- Drop table `shelf_oop`
--
DROP TABLE IF EXISTS shelf_oop;

--
-- Drop procedure `insert_product_status_detail`
--
DROP PROCEDURE IF EXISTS insert_product_status_detail;

--
-- Drop procedure `update_product_status_detail`
--
DROP PROCEDURE IF EXISTS update_product_status_detail;

--
-- Drop table `product_status_detail`
--
DROP TABLE IF EXISTS product_status_detail;

--
-- Drop procedure `insert_product_status_list`
--
DROP PROCEDURE IF EXISTS insert_product_status_list;

--
-- Drop procedure `update_product_status_list`
--
DROP PROCEDURE IF EXISTS update_product_status_list;

--
-- Drop table `product_status_list`
--
DROP TABLE IF EXISTS product_status_list;

--
-- Drop table `vat_detail`
--
DROP TABLE IF EXISTS vat_detail;

--
-- Drop table `vat`
--
DROP TABLE IF EXISTS vat;

--
-- Drop procedure `insert_supplier`
--
DROP PROCEDURE IF EXISTS insert_supplier;

--
-- Drop procedure `update_supplier`
--
DROP PROCEDURE IF EXISTS update_supplier;

--
-- Drop table `supplier`
--
DROP TABLE IF EXISTS supplier;

--
-- Drop table `history`
--
DROP TABLE IF EXISTS history;

--
-- Drop table `users`
--
DROP TABLE IF EXISTS users;

--
-- Drop table `product_in_stock`
--
DROP TABLE IF EXISTS product_in_stock;

--
-- Drop procedure `insert_product_info`
--
DROP PROCEDURE IF EXISTS insert_product_info;

--
-- Drop procedure `update_product_info`
--
DROP PROCEDURE IF EXISTS update_product_info;

--
-- Drop table `product_info`
--
DROP TABLE IF EXISTS product_info;

--
-- Drop procedure `update_category`
--
DROP PROCEDURE IF EXISTS update_category;

--
-- Drop table `category`
--
DROP TABLE IF EXISTS category;

--
-- Set default database
--
USE inventory_management;

--
-- Create table `category`
--
CREATE TABLE category (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(100) NOT NULL,
  code varchar(50) NOT NULL,
  description text DEFAULT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 14,
AVG_ROW_LENGTH = 1489,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `update_category`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_category (IN code varchar(255), IN name varchar(255), IN description text, IN active_flag int, IN id int)
BEGIN
  UPDATE category c
  SET c.code = code,
      c.name = name,
      c.description = description,
      c.active_flag = activeFlag,
      c.update_date = NOW()
  WHERE c.id = id;
END
$$

DELIMITER ;

--
-- Create table `product_info`
--
CREATE TABLE product_info (
  id int(11) NOT NULL AUTO_INCREMENT,
  cate_id int(11) NOT NULL,
  name varchar(100) NOT NULL,
  description text DEFAULT NULL,
  img_url varchar(200) DEFAULT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  qty smallint(6) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 25,
AVG_ROW_LENGTH = 744,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE product_info
ADD CONSTRAINT cateid_fk_product_info FOREIGN KEY (cate_id)
REFERENCES category (id) ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `update_product_info`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_product_info (IN cate_id int, IN name varchar(100), IN description text, IN img_url varchar(200), IN active_flag int(2), IN id int)
BEGIN

  UPDATE product_info pi
  SET pi.cate_id = cate_id,
      pi.name = name,
      pi.description = description,
      pi.img_url = img_url,
      pi.active_flag = active_flag,
      pi.update_date = NOW()
  WHERE pi.id = id;
END
$$

--
-- Create procedure `insert_product_info`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_product_info (IN cate_id int, IN name varchar(100), IN description text, IN img_url varchar(200))
BEGIN
  START TRANSACTION;
    INSERT INTO product_info (cate_id, name, description, img_url, active_flag, create_date, update_date, qty)
      VALUES (cate_id, name, description, img_url, 1, NOW(), NOW(), 0);
  COMMIT;
END
$$

DELIMITER ;

--
-- Create table `product_in_stock`
--
CREATE TABLE product_in_stock (
  id int(11) NOT NULL AUTO_INCREMENT,
  product_id int(11) NOT NULL,
  qty int(100) NOT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  price decimal(15, 2) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE product_in_stock
ADD CONSTRAINT productid_fk_product_instock FOREIGN KEY (product_id)
REFERENCES product_info (id) ON UPDATE CASCADE;

--
-- Create table `users`
--
CREATE TABLE users (
  id int(11) NOT NULL AUTO_INCREMENT,
  user_name varchar(50) NOT NULL,
  password varchar(100) NOT NULL,
  email varchar(100) DEFAULT NULL,
  name varchar(100) NOT NULL,
  active_flag int(2) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  status int(11) DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 10,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `history`
--
CREATE TABLE history (
  id int(11) NOT NULL AUTO_INCREMENT,
  action_name varchar(100) NOT NULL,
  type int(1) NOT NULL,
  product_id int(11) NOT NULL,
  qty int(11) NOT NULL,
  price decimal(15, 2) NOT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  user_id int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 52,
AVG_ROW_LENGTH = 372,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE history
ADD CONSTRAINT history___fk_user FOREIGN KEY (user_id)
REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE history
ADD CONSTRAINT productid_fk_history FOREIGN KEY (product_id)
REFERENCES product_info (id) ON UPDATE CASCADE;

--
-- Create table `supplier`
--
CREATE TABLE supplier (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(100) NOT NULL,
  phone varchar(11) NOT NULL,
  address varchar(100) NOT NULL,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  active_flag int(1) DEFAULT 1,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `update_supplier`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_supplier (IN name varchar(100), IN phone varchar(11), IN address varchar(100), IN active_flag int, IN id int)
BEGIN
  UPDATE supplier s
  SET s.name = name,
      s.phone = phone,
      s.address = address,
      s.active_flag = active_flag,
      s.update_date = NOW()
  WHERE s.id = id;

END
$$

--
-- Create procedure `insert_supplier`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_supplier (IN name varchar(100), IN phone varchar(11), IN address varchar(100))
BEGIN
  INSERT INTO supplier (name, phone, address, create_date, update_date, active_flag)
    VALUES (name, phone, address, NOW(), NOW(), 1);
END
$$

DELIMITER ;

--
-- Create table `vat`
--
CREATE TABLE vat (
  id int(11) NOT NULL AUTO_INCREMENT,
  code varchar(200) DEFAULT NULL,
  tax varchar(50) DEFAULT '123456789',
  supplier_id int(11) DEFAULT NULL,
  percent decimal(2, 1) DEFAULT 0.1,
  active_flag int(11) DEFAULT 1,
  create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  user_id int(11) DEFAULT NULL,
  price decimal(15, 2) DEFAULT 0.00,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 20,
AVG_ROW_LENGTH = 1820,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `vat_code_uindex` on table `vat`
--
ALTER TABLE vat
ADD UNIQUE INDEX vat_code_uindex (code);

--
-- Create foreign key
--
ALTER TABLE vat
ADD CONSTRAINT supplierid_fk_vat FOREIGN KEY (supplier_id)
REFERENCES supplier (id) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE vat
ADD CONSTRAINT vat___fk_user FOREIGN KEY (user_id)
REFERENCES users (id);

--
-- Create table `vat_detail`
--
CREATE TABLE vat_detail (
  id int(11) NOT NULL AUTO_INCREMENT,
  vat_id int(11) NOT NULL,
  product_id int(11) NOT NULL,
  qty int(11) DEFAULT NULL,
  price_one decimal(15, 2) DEFAULT NULL,
  active_flag int(11) DEFAULT 1,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 33,
AVG_ROW_LENGTH = 1092,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE vat_detail
ADD CONSTRAINT productinfoid_fk_vatdetail FOREIGN KEY (product_id)
REFERENCES product_info (id) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE vat_detail
ADD CONSTRAINT vatid_fk_vatdetail FOREIGN KEY (vat_id)
REFERENCES vat (id) ON DELETE CASCADE;

--
-- Create table `product_status_list`
--
CREATE TABLE product_status_list (
  id int(11) NOT NULL AUTO_INCREMENT,
  code varchar(50) NOT NULL,
  type int(1) DEFAULT NULL,
  active_flag int(1) DEFAULT 1,
  create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  user_id int(11) DEFAULT NULL,
  vat_id int(11) DEFAULT NULL,
  price decimal(15, 2) DEFAULT 0.00,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 21,
AVG_ROW_LENGTH = 1489,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `import_list_code_uindex` on table `product_status_list`
--
ALTER TABLE product_status_list
ADD UNIQUE INDEX import_list_code_uindex (code);

--
-- Create foreign key
--
ALTER TABLE product_status_list
ADD CONSTRAINT usersid_fk_importliststaudlist FOREIGN KEY (user_id)
REFERENCES users (id);

--
-- Create foreign key
--
ALTER TABLE product_status_list
ADD CONSTRAINT vatid_product_status_list___fk FOREIGN KEY (vat_id)
REFERENCES vat (id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `update_product_status_list`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_product_status_list (IN code varchar(255), IN activeFlag int(2), IN userId int(11), IN vatId int(11), IN id int(11))
BEGIN
  START TRANSACTION;
    IF (code = (SELECT
          psl.code
        FROM product_status_list psl
        WHERE psl.code = code
        AND psl.active_flag = 1)) THEN
      ROLLBACK;
    ELSE
      UPDATE product_status_list psl
      SET psl.code = code,
          psl.active_fla = activeFlag,
          psl.update_date = NOW(),
          psl.user_id = userId,
          psl.vat_id = vatId
      WHERE psl.id = id;
    END IF;
  END
  $$

--
-- Create procedure `insert_product_status_list`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_product_status_list (IN code varchar(255), IN type int(11), IN userId int(11), IN vatId int(11))
BEGIN
  START TRANSACTION;
    IF (code = (SELECT
          psl.code
        FROM product_status_list psl
        WHERE psl.code = code
        AND psl.active_flag = 1)) THEN
      ROLLBACK;
    ELSE
      INSERT INTO product_status_list (code, type, active_flag, create_date, update_date, user_id, vat_id)
        VALUES (code, type, 1, NOW(), NOW(), userId, vatId);
    END IF;
  END
  $$

DELIMITER ;

--
-- Create table `product_status_detail`
--
CREATE TABLE product_status_detail (
  id int(11) NOT NULL AUTO_INCREMENT,
  product_status_list_id int(11) NOT NULL,
  product_id int(11) NOT NULL,
  qty int(11) NOT NULL,
  active_flag int(11) DEFAULT 1,
  price_one decimal(15, 2) DEFAULT NULL,
  qty_rest int(11) DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 33,
AVG_ROW_LENGTH = 963,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE product_status_detail
ADD CONSTRAINT importlistid_fk_productstatsdetail FOREIGN KEY (product_status_list_id)
REFERENCES product_status_list (id) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE product_status_detail
ADD CONSTRAINT productinfoid_fk_importdetailstatusdetail FOREIGN KEY (product_id)
REFERENCES product_info (id) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `update_product_status_detail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_product_status_detail (IN productStatusListId int(11), IN productId int(11), IN qty int(11), IN activeFlag int(2), IN psdId int(11))
BEGIN
  DECLARE currQty int;
  DECLARE qtyRest int;
  DECLARE vatId int;
  DECLARE price decimal;
  DECLARE qtyVat int;
  DECLARE backId int;
  SET vatId = (SELECT
      psl.vat_id
    FROM product_status_list psl
    WHERE psl.id = productStatusListId
    AND psl.active_flag = 1);
  SET price = (SELECT
      vd.price_one
    FROM vat_detail vd
    WHERE vd.vat_id = vatId
    AND vd.product_id = productId);
  SET qtyVat = (SELECT
      vd.qty
    FROM vat_detail vd
    WHERE vd.vat_id = vatId
    AND vd.product_id = productId);

  IF (activeFlag = 0) THEN
    UPDATE product_status_detail psd
    SET psd.active_flag = activeFlag
    WHERE psd.id = psdId;

  ELSEIF (productId = (SELECT
        psd.product_id
      FROM product_status_detail psd
      WHERE psd.product_id = productId
      AND psd.id = psdId)) THEN
    SET currQty = (SELECT
        psd.qty
      FROM product_status_detail psd
      WHERE psd.product_id = productId
      AND psd.product_status_list_id = productStatusListId);
    SET qty = qty + currQty;
    SET qtyRest = qtyVat - qty;

    UPDATE product_status_detail psd
    SET psd.product_status_list_id = productStatusListId,
        psd.product_id = productId,
        psd.qty = qty,
        psd.qty_rest = qtyRest,
        psd.price_one = price
    WHERE psd.id = psdId;

  END IF;

  IF ((SELECT
        psl.type
      FROM product_status_list psl
      WHERE psl.id = productStatusListId) = 1) THEN
    SET backId = (SELECT
        psl.id
      FROM product_status_list psl
      WHERE psl.vat_id = vatId
      AND psl.type = 2
      AND psl.active_flag = 1);
    IF (productId = (SELECT
          psd.product_id
        FROM product_status_detail psd
        WHERE psd.product_status_list_id = backId
        AND psd.product_id = productId
        AND psd.active_flag = 1)) THEN
      UPDATE product_status_detail psd
      SET psd.product_status_list_id = productStatusListId,
          psd.product_id = productId,
          psd.qty = qty,
          psd.qty_rest = qtyRest,
          psd.price_one = price
      WHERE psd.product_status_list_id = backId
      AND psd.product_id = productId;
    ELSE
      INSERT INTO product_status_detail (product_status_list_id, product_id, qty, active_flag, price_one, qty_rest)
        VALUES (backId, productId, qtyRest, 1, price, qty);
    END IF;
  END IF;
END
$$

--
-- Create procedure `insert_product_status_detail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_product_status_detail (IN productStatusListId int(11), IN productId int(11), IN qty int(11))
BEGIN
  DECLARE currQty int;
  DECLARE qtyRest int;
  DECLARE vatId int;
  DECLARE price decimal;
  DECLARE qtyVat int;
  DECLARE backId int;
  SET vatId = (SELECT
      psl.vat_id
    FROM product_status_list psl
    WHERE psl.id = productStatusListId
    AND psl.active_flag = 1);
  START TRANSACTION;
    IF (productId = (SELECT
          vd.product_id
        FROM vat_detail vd
        WHERE vd.vat_id = vatId
        AND vd.product_id = productId)) THEN
      SET price = (SELECT
          vd.price_one
        FROM vat_detail vd
        WHERE vd.vat_id = vatId
        AND vd.product_id = productId);
      SET qtyVat = (SELECT
          vd.qty
        FROM vat_detail vd
        WHERE vd.vat_id = vatId
        AND vd.product_id = productId);
      IF (productId = (SELECT
            psd.product_id
          FROM product_status_detail psd
          WHERE psd.product_id = productId
          AND psd.product_status_list_id = productStatusListId)) THEN
        SET currQty = (SELECT
            psd.qty
          FROM product_status_detail psd
          WHERE psd.product_id = productId
          AND psd.product_status_list_id = productStatusListId);

        UPDATE product_status_detail psd
        SET psd.qty = qty
        WHERE psd.product_status_list_id = productStatusListId
        AND psd.product_id = productId;
        SET qty = qty + currQty;
      ELSE

        SET qtyRest = qtyVat - qty;
        IF (qtyRest < 0) THEN
          ROLLBACK;
        END IF;
        INSERT INTO product_status_detail (product_status_list_id, product_id, qty, active_flag, price_one, qty_rest)
          VALUES (productStatusListId, productId, qty, 1, price, qtyRest);
      END IF;
      IF ((SELECT
            psl.type
          FROM product_status_list psl
          WHERE psl.id = productStatusListId
          AND psl.active_flag = 1) = 1) THEN
        SET backId = (SELECT
            psl.id
          FROM product_status_list psl
          WHERE psl.vat_id = vatId
          AND psl.type = 2
          AND psl.active_flag = 1);
        IF (productId = (SELECT
              psd.product_id
            FROM product_status_detail psd
            WHERE psd.product_status_list_id = backId
            AND psd.product_id = productId
            AND psd.active_flag = 1)) THEN
          DELETE
            FROM product_status_detail
          WHERE product_id = productId
            AND product_status_list_id = backId;
        END IF;
        INSERT INTO product_status_detail (product_status_list_id, product_id, qty, active_flag, price_one, qty_rest)
          VALUES (backId, productId, qtyRest, 1, price, qty);
      END IF;
    COMMIT;
  ELSE
    ROLLBACK;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `shelf_oop`
--
CREATE TABLE shelf_oop (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(20) NOT NULL,
  description varchar(200) DEFAULT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total int(11) DEFAULT 500,
  qty int(11) DEFAULT NULL,
  qty_rest int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `invoice`
--
CREATE TABLE invoice (
  id int(11) NOT NULL AUTO_INCREMENT,
  code varchar(50) NOT NULL,
  type int(1) NOT NULL,
  product_id int(11) NOT NULL,
  qty int(11) NOT NULL,
  price decimal(15, 2) NOT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  supplier_id int(11) DEFAULT NULL,
  user_id int(11) DEFAULT NULL,
  shelf_id int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 27,
AVG_ROW_LENGTH = 712,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE invoice
ADD CONSTRAINT invoice___fk_shelf FOREIGN KEY (shelf_id)
REFERENCES shelf_oop (id) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE invoice
ADD CONSTRAINT invoice___fk_user FOREIGN KEY (user_id)
REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE invoice
ADD CONSTRAINT productid_fk_invoice FOREIGN KEY (product_id)
REFERENCES product_info (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE invoice
ADD CONSTRAINT supplierid_fk_invoice FOREIGN KEY (supplier_id)
REFERENCES supplier (id) ON UPDATE CASCADE;

--
-- Create table `product_detail`
--
CREATE TABLE product_detail (
  id int(11) NOT NULL AUTO_INCREMENT,
  product_id int(11) NOT NULL,
  invoice_id int(11) DEFAULT NULL,
  price_in decimal(15, 2) NOT NULL,
  active_flag int(1) DEFAULT NULL,
  create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  price_out decimal(15, 2) DEFAULT NULL,
  supplier_id int(11) DEFAULT NULL,
  code varchar(50) NOT NULL,
  status varchar(10) DEFAULT 'Valid',
  shelf_name varchar(20) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `code` on table `product_detail`
--
ALTER TABLE product_detail
ADD UNIQUE INDEX code (code);

--
-- Create foreign key
--
ALTER TABLE product_detail
ADD CONSTRAINT invoiceid_fk_productdetail FOREIGN KEY (invoice_id)
REFERENCES invoice (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE product_detail
ADD CONSTRAINT product_info_id_fk_productdetail FOREIGN KEY (product_id)
REFERENCES product_info (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE product_detail
ADD CONSTRAINT supplierid_fk_productdetail FOREIGN KEY (supplier_id)
REFERENCES supplier (id) ON UPDATE CASCADE;

--
-- Create table `customer`
--
CREATE TABLE customer (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(255) DEFAULT NULL,
  phone varchar(11) DEFAULT NULL,
  address varchar(255) DEFAULT NULL,
  create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  active_flag int(1) DEFAULT 1,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `update_customer`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_customer (IN name varchar(255), IN phone varchar(255), IN address varchar(255), IN active_flag int, IN id int)
BEGIN
  START TRANSACTION;
    IF ((SELECT
          c.name
        FROM customer c
        WHERE c.id = id
        AND c.name = name
        AND c.phone = phone
        AND c.address = address
        AND c.active_flag = 1) <> "") THEN
      ROLLBACK;
    ELSE
      UPDATE customer c
      SET c.name = name,
          c.active_flag = activeFlag,
          c.phone = phone,
          c.address = address,
          c.update_date = NOW()
      WHERE c.id = id;
    COMMIT;
  END IF;


END
$$

--
-- Create procedure `insert_customer`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_customer (IN name varchar(255), IN phone varchar(11), IN address varchar(255))
BEGIN
  START TRANSACTION;
    IF (phone = (SELECT
          c.phone
        FROM customer c
        WHERE c.phone = phone)) THEN
      ROLLBACK;
    COMMIT;
  ELSE
    INSERT INTO customer (name, phone, address, active_flag, create_date, update_date)
      VALUES (name, phone, address, 1, NOW(), NOW());

  END IF;
END
$$

DELIMITER ;

--
-- Create table `issue`
--
CREATE TABLE issue (
  id int(11) NOT NULL AUTO_INCREMENT,
  code varchar(50) NOT NULL,
  customer_id int(11) NOT NULL,
  user_id int(11) NOT NULL,
  active_flag int(2) NOT NULL DEFAULT 1,
  create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  price decimal(15, 2) DEFAULT 0.00,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `issue_code_uindex` on table `issue`
--
ALTER TABLE issue
ADD UNIQUE INDEX issue_code_uindex (code);

--
-- Create foreign key
--
ALTER TABLE issue
ADD CONSTRAINT export_fk_customer FOREIGN KEY (customer_id)
REFERENCES customer (id) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE issue
ADD CONSTRAINT export_fk_user FOREIGN KEY (user_id)
REFERENCES users (id) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `update_issue`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_issue (IN code varchar(255), IN customerId int(11), IN userId int(11), IN activeFlag int(2), IN id int(11))
BEGIN
  UPDATE issue i
  SET i.code = code,
      i.customer_id = customerId,
      i.user_id = userId,
      i.active_flag = activeFlag,
      i.update_date = NOW()
  WHERE i.id = id;
END
$$

DELIMITER ;

--
-- Create table `issue_detail`
--
CREATE TABLE issue_detail (
  id int(11) NOT NULL AUTO_INCREMENT,
  issue_id int(50) NOT NULL,
  product_id int(11) NOT NULL,
  imei varchar(100) NOT NULL,
  active_flag int(2) NOT NULL DEFAULT 1,
  price_one decimal(15, 2) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE issue_detail
ADD CONSTRAINT export_detail_fk_export FOREIGN KEY (issue_id)
REFERENCES issue (id) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE issue_detail
ADD CONSTRAINT export_detail_fk_product FOREIGN KEY (product_id)
REFERENCES product_info (id) ON DELETE CASCADE;

--
-- Create table `role`
--
CREATE TABLE role (
  id int(11) NOT NULL AUTO_INCREMENT,
  role_name varchar(50) NOT NULL,
  description varchar(200) NOT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `user_role`
--
CREATE TABLE user_role (
  id int(11) NOT NULL AUTO_INCREMENT,
  user_id int(11) NOT NULL,
  role_id int(11) NOT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `roleid_fk_user_role` on table `user_role`
--
ALTER TABLE user_role
ADD INDEX roleid_fk_user_role (role_id);

--
-- Create index `userid_fk_user_role` on table `user_role`
--
ALTER TABLE user_role
ADD INDEX userid_fk_user_role (user_id);

--
-- Create foreign key
--
ALTER TABLE user_role
ADD CONSTRAINT roleid_fk FOREIGN KEY (role_id)
REFERENCES role (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE user_role
ADD CONSTRAINT userid_fk FOREIGN KEY (user_id)
REFERENCES users (id) ON UPDATE CASCADE;

--
-- Create table `menu`
--
CREATE TABLE menu (
  id int(11) NOT NULL AUTO_INCREMENT,
  parent_id int(11) NOT NULL,
  url varchar(100) NOT NULL,
  name varchar(100) NOT NULL,
  order_index int(1) NOT NULL DEFAULT 0,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 105,
AVG_ROW_LENGTH = 157,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `auth`
--
CREATE TABLE auth (
  id int(11) NOT NULL AUTO_INCREMENT,
  role_id int(11) NOT NULL,
  menu_id int(11) NOT NULL,
  permission int(1) NOT NULL DEFAULT 1,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 414,
AVG_ROW_LENGTH = 60,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `menuid_fk_auth` on table `auth`
--
ALTER TABLE auth
ADD INDEX menuid_fk_auth (menu_id);

--
-- Create foreign key
--
ALTER TABLE auth
ADD CONSTRAINT menuid_fk FOREIGN KEY (menu_id)
REFERENCES menu (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE auth
ADD CONSTRAINT roleid_fk_auth FOREIGN KEY (role_id)
REFERENCES role (id) ON UPDATE CASCADE;

--
-- Create table `shelf`
--
CREATE TABLE shelf (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(10) NOT NULL DEFAULT 'Z',
  description varchar(200) DEFAULT NULL,
  active_flag int(1) NOT NULL DEFAULT 1,
  create_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total int(11) DEFAULT 500,
  qty int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `update_shelf`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_shelf (IN name varchar(10), IN description varchar(200), IN active_flag int(2), IN total int, IN id int)
BEGIN
  UPDATE shelf s
  SET s.name = name,
      s.description = description,
      s.active_flag = active_flag,
      s.total = total,
      s.update_date = NOW()
  WHERE s.id = id;
END
$$

--
-- Create procedure `insert_shelf`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_shelf (IN name varchar(10), IN description varchar(200), IN total int)
BEGIN
  START TRANSACTION;
    INSERT INTO shelf (name, description, active_flag, create_date, update_date, total, qty)
      VALUES (name, description, 1, NOW(), NOW(), total, 0);
  COMMIT;
END
$$

DELIMITER ;

--
-- Create table `product_detail_pt`
--
CREATE TABLE product_detail_pt (
  id int(11) NOT NULL AUTO_INCREMENT,
  product_id int(11) NOT NULL,
  product_status_list_id int(11) DEFAULT NULL,
  active_flag int(1) DEFAULT 1,
  create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  price_out decimal(15, 2) DEFAULT NULL,
  code varchar(50) NOT NULL,
  status varchar(10) DEFAULT 'Valid',
  supplier_id int(11) DEFAULT NULL,
  price_in decimal(15, 2) DEFAULT NULL,
  shelf_id int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 27,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `code` on table `product_detail_pt`
--
ALTER TABLE product_detail_pt
ADD UNIQUE INDEX code (code);

--
-- Create foreign key
--
ALTER TABLE product_detail_pt
ADD CONSTRAINT product_detail_pt___fk_shelf FOREIGN KEY (shelf_id)
REFERENCES shelf (id);

--
-- Create foreign key
--
ALTER TABLE product_detail_pt
ADD CONSTRAINT product_info_id_fk_productdetail_pt FOREIGN KEY (product_id)
REFERENCES product_info (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE product_detail_pt
ADD CONSTRAINT product_status_list_fk_productdetail_pt FOREIGN KEY (product_status_list_id)
REFERENCES product_status_list (id) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE product_detail_pt
ADD CONSTRAINT supplier_product_detail_pt___fk FOREIGN KEY (supplier_id)
REFERENCES supplier (id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `update_product_detail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_product_detail (IN productId int(11), IN productStatusListId int(11), IN activeFlag int(3), IN code varchar(255), IN supplierId int(11), IN shelfId int(11), IN priceOut decimal(15, 2), IN id int(11))
BEGIN
  DECLARE priceIn decimal(15, 2);
  SET priceIn = (SELECT
      psd.price_one
    FROM product_status_detail psd
    WHERE psd.product_status_list_id = productStatusListId
    AND psd.product_id = productId);
  START TRANSACTION;
    IF ((SELECT
          (s.total - s.qty)
        FROM shelf s
        WHERE s.id = shelfId) > 0) THEN
      UPDATE shelf s
      SET s.qty = s.qty - 1
      WHERE s.id = (SELECT
          pdp.shelf_id
        FROM product_detail_pt pdp
        WHERE pdp.id = id);

      UPDATE shelf s
      SET s.qty = s.qty + 1
      WHERE s.id = shelfId;

      UPDATE product_detail_pt AS pd
      SET product_id = productId,
          product_status_list_id = productStatusListId,
          active_flag = activeFlag,
          code = code,
          supplier_id = supplierId,
          shelf_id = shelfId,
          price_out = priceOut,
          price_in = priceIn,
          pd.update_date = NOW()
      WHERE pd.id = id;

    COMMIT;
  ELSE
    ROLLBACK;
  END IF;
END
$$

--
-- Create procedure `update_issue_detail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_issue_detail (IN imei varchar(255), IN activeFlag int(2), IN id int(11))
BEGIN
  DECLARE price decimal;
  SET price = (SELECT
      pdp.price_out
    FROM product_detail_pt pdp
    WHERE pdp.code = imei
    AND pdp.active_flag = 1);
  START TRANSACTION;

    IF ((SELECT
          pdp.code
        FROM product_detail_pt pdp
        WHERE pdp.id = id
        AND pdp.code = imei
        AND pdp.active_flag = 1
        AND pdp.status = 'Valid') = imei) THEN
      UPDATE issue_detail id
      SET id.imei = imei,
          id.active_flag = activeFlag,
          id.price_one = price
      WHERE id.id = id;
    COMMIT;

  ELSE
    ROLLBACK;
  END IF;
END
$$

--
-- Create procedure `insert_product_detail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_product_detail (IN productId int(11), IN productStatusListId int(11), IN active_flag int(3), IN code varchar(255), IN supplier_id int(11), IN shelf_id int(11), IN price_out decimal(15, 2))
BEGIN
  DECLARE priceIn decimal(15, 2);
  SET priceIn = (SELECT
      psd.price_one
    FROM product_status_detail psd
    WHERE psd.product_status_list_id = productStatusListId
    AND psd.product_id = productId);
  START TRANSACTION;
    IF ((SELECT
          (s.total - s.qty)
        FROM shelf s
        WHERE s.id = shelf_id) <= 0
      AND code = (SELECT
          pdp.code
        FROM product_detail_pt pdp
        WHERE pdp.code = code
        AND pdp.active_flag = 1)) THEN
      ROLLBACK;
    ELSE

      INSERT INTO product_detail_pt (product_id, product_status_list_id, active_flag, code, supplier_id, shelf_id, price_out, price_in, create_date, update_date)
        VALUES (productId, productStatusListId, active_flag, code, supplier_id, shelf_id, price_out, priceIn, NOW(), NOW());

      UPDATE shelf s
      SET s.qty = s.qty + 1
      WHERE s.id = shelf_id;
    COMMIT;
  END IF;
END
$$

--
-- Create procedure `insert_issue_detail`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_issue_detail (IN productId int(11), IN issueId int(11), IN imei varchar(100))
BEGIN
  DECLARE priceOut decimal(15, 2);
  DECLARE shelfId int(2);
  SET priceOut = (SELECT
      pdp.price_out
    FROM product_detail_pt pdp
    WHERE pdp.product_id = productId
    AND pdp.code = imei);
  SET shelfId = (SELECT
      pdp.shelf_id
    FROM product_detail_pt pdp
    WHERE pdp.product_id = productId
    AND pdp.code = imei);
  START TRANSACTION;
    IF ((SELECT
          pdp.status
        FROM product_detail_pt pdp
        WHERE pdp.product_id = productId
        AND pdp.code = imei
        AND pdp.active_flag = 1) = 'Valid') THEN
      INSERT INTO issue_detail (issue_id, product_id, imei, active_flag, price_one)
        VALUES (issueId, productId, imei, 1, priceOut);
    COMMIT;
  ELSE
    ROLLBACK;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `vat_detail_temp`
--
CREATE TABLE vat_detail_temp (
  id int(11) NOT NULL AUTO_INCREMENT,
  product_name varchar(100) DEFAULT NULL,
  qty int(11) DEFAULT NULL,
  price_one decimal(15, 2) DEFAULT NULL,
  price_total decimal(15, 2) DEFAULT NULL,
  vat_name varchar(50) DEFAULT NULL,
  active_flag int(11) DEFAULT 1,
  supplier_name varchar(100) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 543,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `product_status_detail_temp`
--
CREATE TABLE product_status_detail_temp (
  id int(11) NOT NULL AUTO_INCREMENT,
  product_name varchar(100) DEFAULT NULL,
  product_status_name varchar(100) DEFAULT NULL,
  qty int(11) DEFAULT NULL,
  price_one decimal(15, 2) DEFAULT NULL,
  price_total decimal(15, 2) DEFAULT NULL,
  active_flag int(11) DEFAULT 1,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 697,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `invoice_temp`
--
CREATE TABLE invoice_temp (
  id int(11) NOT NULL AUTO_INCREMENT,
  active_flag int(11) DEFAULT 1,
  code varchar(100) DEFAULT NULL,
  product_name varchar(100) DEFAULT NULL,
  qty int(11) DEFAULT NULL,
  price decimal(15, 2) DEFAULT NULL,
  update_date timestamp NULL DEFAULT NULL,
  shelf_name varchar(20) DEFAULT NULL,
  supplier_name varchar(50) DEFAULT NULL,
  user_name varchar(100) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 834,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `insert_issue`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_issue (IN code varchar(255), IN customerId int(11), IN userId int(11))
BEGIN
  START TRANSACTION;
    IF (code = (SELECT
          i.code
        FROM issue i
        WHERE i.code = code)) THEN
      ROLLBACK;
    ELSE
      INSERT INTO issue (code, customer_id, user_id, active_flag, create_date, update_date, price)
        VALUES (code, customerId, userId, 1, NOW(), NOW(), 0);
    COMMIT;
  END IF;
END
$$

--
-- Create procedure `insert_category`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE insert_category (IN code varchar(50), IN name varchar(100), IN description text)
BEGIN
  START TRANSACTION;
    IF (code = (SELECT
          c.code
        FROM category c
        WHERE c.code = code)) THEN
      ROLLBACK;
    COMMIT;
  ELSE
    INSERT INTO category (code, name, description, active_flag, create_date, update_date)
      VALUES (code, name, description, 1, NOW(), NOW());
  END IF;
END
$$

DELIMITER ;

-- 
-- Dumping data for table category
--
INSERT INTO category VALUES
(1, 'Xiaomi', 'xiaomi', 'Xiaomi from China', 0, '2020-04-15 01:14:52', '2020-04-15 19:18:26'),
(2, 'Apple', 'apple', 'Apple from USA', 0, '2020-04-19 21:14:04', '2020-04-29 16:46:45'),
(3, 'Oppo', 'Oppo', 'Oppo from VietNam', 0, '2020-05-10 08:56:20', '2020-05-10 08:56:47'),
(4, 'Nokia', 'nokia', 'Nokia from VN', 0, '2020-05-12 05:56:52', '2020-05-12 05:57:03'),
(5, 'Nokia', 'nokia', 'This is Nokia from USA', 0, '2020-08-01 18:33:33', '2020-08-01 18:33:42'),
(6, 'Black Berry', 'blackberry', 'This is Black Berry 1', 0, '2020-08-01 21:57:19', '2020-08-01 21:57:26'),
(7, 'AB', 'ab', 'this', 0, '2020-08-05 15:40:06', '2020-08-05 15:40:17'),
(8, 'agf', 'ag', 'agagf', 0, '2020-08-05 15:44:06', '2020-08-05 15:44:12'),
(9, 'Motorola', 'motorola', 'Motorola from USA', 0, '2020-08-05 19:41:47', '2020-08-05 19:45:19'),
(10, 'Motorola', 'motorola', 'Motorola from USA', 0, '2020-08-05 19:45:32', '2020-08-06 08:44:38'),
(11, 'Motorola', 'motorola', 'Motorola from USA', 0, '2020-08-06 08:44:49', '2020-08-06 08:44:49'),
(12, 'ABC', 'ab', 'ABC', 0, '2020-08-19 15:17:52', '2020-08-19 15:20:34'),
(14, 'Dell', 'dell', 'Dell from USA', 1, '2021-01-23 13:44:14', '2021-01-23 13:44:22'),
(15, 'HP', 'hp', 'HP from VN', 1, '2021-01-23 13:44:39', '2021-01-23 13:44:39');

-- 
-- Dumping data for table supplier
--
INSERT INTO supplier VALUES
(1, 'Group1', '038516', '55 Giai Phong', '2020-05-01 20:05:42', '2020-05-01 20:05:42', 1),
(2, 'Phanh', '0385163198', 'D5', '2020-08-05 15:49:13', '2020-08-05 15:52:02', 0),
(3, 'PM32', '0183617834', 'Ha Noi', '2020-08-06 08:47:11', '2020-08-12 16:35:11', 1);

-- 
-- Dumping data for table shelf_oop
--
INSERT INTO shelf_oop VALUES
(1, 'A', 'for iphone', 1, '2020-08-04 21:08:21', '2020-08-06 08:52:31', 1000, 226, 774),
(2, 'Z', 'for back', 1, '2020-08-04 21:08:21', '2020-08-04 22:56:14', 400, 0, 400);

-- 
-- Dumping data for table product_info
--
INSERT INTO product_info VALUES
(1, 1, 'Xiaomi Mi 8', 'Mi 8 UD', 'https://msmobile.com.vn/images/products/2019/08/16/large/xiaomi-mi8-pro-msmobile-2_1565954247.jpg', 0, '2020-04-19 20:01:58', '2020-04-19 20:01:58', -12),
(2, 1, 'Xiaomi Mi 9', 'Xiaomi Mi 9', '/upload/1588676046535_a.jpg', 0, '2020-05-04 20:52:14', '2020-05-04 20:59:39', 5),
(3, 2, 'Iphone XS Max', 'Iphone XS Max', '/upload/a.jpg', 0, '2020-05-04 20:58:23', '2020-05-05 02:06:04', 5),
(4, 2, 'Iphone XS Max', 'Iphone XS Max', '/upload/1588695416493_1588695402090_b.jpg', 0, '2020-05-05 02:12:08', '2020-05-05 04:01:03', 5),
(5, 2, 'Iphone 7', 'Iphone 7', 'https://bachlongmobile.com/media/catalog/product/cache/2/image/040ec09b1e35df139433887a97daa66f/7/p/7pgold.jpg', 0, '2020-05-10 08:58:11', '2020-05-10 08:58:11', 3),
(6, 3, 'Oppoo Find X', 'Oppoo Find X', '/upload/1589288307885_article_3149.jpg', 0, '2020-05-12 05:58:28', '2020-05-12 05:58:28', 5),
(7, 1, 'Xiaomi Mi 10', 'Xiaomi Mi 10', '/upload/1594916971277_mi10-pro.jpg', 0, '2020-07-16 23:29:31', '2020-07-16 23:32:10', 5),
(8, 1, 'Xiaomi Mi 10', 'Xiaomi Mi 10', '/upload/1594917812920_mi10-pro.jpg', 0, '2020-07-16 23:32:24', '2020-07-16 23:43:33', 5),
(9, 5, 'Nokia 1280', 'This is Nokia 1280', '/upload/1596281728478_uploaded_c252a5a934028101e6e8f6d9c5605c73.jpg', 0, '2020-08-01 18:34:03', '2020-08-01 18:35:28', 5),
(10, 1, '', 'áº©g', '/upload/1596281752982_', 0, '2020-08-01 18:35:53', '2020-08-01 18:36:00', 5),
(11, 6, 'BB1', 'This is BB1', '/upload/1597203004314_blackberry-passport-sp-1-x600.jpg', 0, '2020-08-01 21:57:40', '2020-08-12 10:30:04', 5),
(12, 2, '', '', '/upload/1596640567642_', 0, '2020-08-05 22:16:08', '2020-08-05 22:16:20', 5),
(13, 1, '', '', '/upload/1596641349403_', 0, '2020-08-05 22:29:09', '2020-08-05 22:29:18', 5),
(14, 2, 'Iphone 9', 'Iphone 9', '/upload/1597202995357_600_iphone_11_pro_xanh_reu_xtmobile_1.jpg', 0, '2020-08-06 08:45:53', '2020-08-12 10:29:55', 1),
(15, 11, '', '', '/upload/1606933783685_', 0, '2020-12-03 01:29:44', '2020-12-03 01:29:51', 5),
(16, 11, 'a', '', '/upload/1606933886276_', 0, '2020-12-03 01:31:26', '2020-12-03 01:31:32', 5),
(17, 11, '', '', '/upload/1606934011483_', 0, '2020-12-03 01:33:31', '2020-12-03 01:33:38', 5),
(18, 1, '', '', '/upload/1606934158227_', 0, '2020-12-03 01:35:58', '2020-12-03 01:36:58', 5),
(19, 3, 'a', '', '/upload/1606934205663_', 0, '2020-12-03 01:36:46', '2020-12-03 01:37:03', 5),
(20, 12, '', 'Ã¢gg', '/upload/1606935373685_117771129_1019754305218751_1017931151692542662_n.png', 0, '2020-12-03 01:56:14', '2020-12-03 01:56:53', 5),
(21, 11, '', '', '/upload/1606935944834_', 0, '2020-12-03 02:05:45', '2020-12-03 02:05:51', 5),
(22, 11, '', 't', '/upload/1608920049783_', 0, '2020-12-26 01:14:10', '2020-12-26 01:14:16', 5),
(25, 14, 'Dell XPS', 'Del XPS', '/upload/1611384364072_dell-xps-13-9370-i7-8550u-8gb-256gb-office365-win1-1-1-600x600.jpg', 1, '2021-01-23 13:46:04', '2021-01-23 13:46:04', 5);

-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
(1, 'hieupv', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', 'hieu79062@nuce.edu.vn', 'Hieu', 1, '2020-04-06 00:38:16', '2020-04-06 00:38:16', 0),
(2, 'hoanganh', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', 'vuanh141299@gmail.com', 'Anh', 1, '2020-04-06 01:50:10', '2020-04-06 01:50:10', 0),
(3, 'my', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', 'mybui12334@gmail.com', 'My ABC', 0, '2020-08-05 11:19:22', '2020-08-05 15:52:40', 0),
(4, 'mybui', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', 'mybui@gmail.com', 'My ABC TYY', 0, '2020-08-05 15:54:27', '2020-08-13 01:26:07', 0),
(5, 'mybui', '3kqjU1tr3tJn9a4Yr4xTfgCzAnvWTyWT', 'my@gmail.com', 'My', 0, '2020-08-13 01:26:26', '2020-08-13 01:26:26', 0),
(6, 'hieupv_oop', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', 'hieu79062@nuce.edu.vn', 'Hieu', 1, '2020-08-13 22:27:58', '2020-08-13 22:27:58', 0),
(7, 'hieupv_pttk', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', 'hieu79062@nuce.edu.vn', 'Hieu', 1, '2020-08-13 22:28:24', '2020-08-13 22:28:24', 1),
(8, 'hieupv_pttk', 'g/Fp1WdaKMWLAURClWmo7ygf5+pUr9O/', '', '', 0, '2020-12-03 01:50:14', '2020-12-03 01:50:21', 0),
(9, 'hieupv_pttk123', 'v8DJHvbvXBBxG3YHLAxljfE3O9yk2aVV', 'chotoabc@gmail.com', 'Phan VÄn Hiáº¿u', 0, '2021-01-22 22:26:18', '2021-01-22 22:26:18', 0);

-- 
-- Dumping data for table customer
--
INSERT INTO customer VALUES
(1, 'HieuPV', '0367', 'HN', '2021-01-20 00:36:54', '2021-01-20 00:36:54', 1),
(2, 'Phan VÄn Hiáº¿u', '0385163198', 'D5 Quá»³nh Mai- Quá»³nh Mai- Hai BÃ  TrÆ°ng', '2021-01-22 22:18:00', '2021-01-22 22:18:00', 1);

-- 
-- Dumping data for table vat
--
INSERT INTO vat VALUES
(1, 'V11', '123456', 1, 0.1, 0, '2020-07-07 04:56:45', '2020-12-19 10:27:50', 7, 88000.00),
(2, 'V2', '123456', 1, 0.1, 0, '2020-08-01 23:50:08', '2020-08-13 09:39:14', 1, 0.00),
(3, 'V3', '123456', 3, 0.1, 0, '2020-08-10 22:13:26', '2020-08-11 01:19:41', 1, 0.00),
(5, 'vn', '0254589', 1, 0.1, 0, '2020-08-13 08:05:03', '2020-08-13 09:10:09', 1, 0.00),
(6, 'V10', '123456', 1, 0.1, 0, '2020-08-13 09:51:01', '2020-12-19 10:27:51', 1, 20000.00),
(7, 'V20', '123456', 3, 0.1, 0, '2020-08-13 09:53:56', '2020-12-19 10:27:51', 1, 100000.00),
(18, 'Vat1125', '1324', 3, 0.1, 0, '2020-12-13 10:51:36', '2020-12-20 11:57:24', 7, 1000.00),
(19, 'Vat15', '123456', 3, 0.1, 0, '2021-01-22 11:03:24', '2021-01-22 11:03:24', 7, 6000.00),
(20, 'VAT1', '123456', 1, 0.1, 1, '2021-01-23 13:47:01', '2021-01-23 13:47:01', 7, 150000.00);

-- 
-- Dumping data for table shelf
--
INSERT INTO shelf VALUES
(5, 'A', 'For iphone, xiaomi', 1, '2020-08-03 16:15:56', '2020-11-10 09:22:38', 500, -1),
(6, 'Z', 'for product back', 1, '2020-08-03 16:18:23', '2020-12-26 07:58:07', 405, 0);

-- 
-- Dumping data for table product_status_list
--
INSERT INTO product_status_list VALUES
(1, 'D1', 1, 0, '2020-08-01 22:44:33', '2020-08-12 02:12:05', 1, 1, -149000.00),
(2, 'D2', 1, 0, '2020-08-01 23:19:12', '2020-08-13 09:39:33', 1, 1, -29000.00),
(3, 'B1', 2, 0, '2020-08-02 17:18:06', '2020-12-26 07:58:07', 1, 1, 0.00),
(7, 'D3', 1, 0, '2020-08-11 00:28:37', '2020-08-11 01:19:41', 1, 3, 1000.00),
(10, 'D4', 1, 0, '2020-08-12 02:08:49', '2020-08-13 09:39:14', 1, 2, 1000.00),
(12, 'B2', 2, 0, '2020-08-12 02:33:41', '2020-08-13 09:39:15', 1, 2, 1000.00),
(13, '0125478', 1, 0, '2020-08-13 08:16:47', '2020-08-13 09:10:09', 1, 5, 1000.00),
(14, '012458', 2, 0, '2020-08-13 08:24:30', '2020-08-13 09:10:10', 1, 5, 1000.00),
(15, 'D10', 1, 0, '2020-08-13 09:55:19', '2020-08-13 09:55:45', 1, 6, -79000.00),
(16, 'D20', 1, 0, '2020-08-13 09:58:24', '2020-08-13 10:15:23', 1, 7, 1000.00),
(17, 'B10', 2, 0, '2020-08-13 09:59:08', '2020-08-13 09:59:08', 1, 6, 1000.00),
(19, 'D15', 1, 0, '2021-01-22 11:06:30', '2021-01-22 11:06:30', 7, 19, 0.00),
(20, 'B15', 2, 0, '2021-01-22 15:56:36', '2021-01-22 15:56:36', 7, 19, 0.00),
(21, 'DONE1', 1, 1, '2021-01-23 13:47:24', '2021-01-23 13:47:24', 7, 20, 90000.00),
(24, 'BACK1', 2, 1, '2021-01-23 13:57:44', '2021-01-23 13:57:44', 7, 20, 60000.00);

-- 
-- Dumping data for table invoice
--
INSERT INTO invoice VALUES
(1, 'X2', 2, 1, 1, 15000.00, 1, '2020-05-10 09:03:43', '2020-05-16 03:22:33', 1, 1, 2),
(2, 'N1', 1, 11, 10, 50000.00, 0, '2020-05-12 02:21:47', '2020-08-05 21:44:37', 1, 1, 1),
(3, 'N2', 1, 4, 10, 100000.00, 0, '2020-05-12 04:22:50', '2020-05-12 04:57:44', 1, 1, 1),
(4, 'N3', 1, 4, 3, 100000.00, 0, '2020-05-12 04:33:09', '2020-05-12 04:50:31', 1, 1, 1),
(5, 'N4', 1, 1, 2, 50000.00, 0, '2020-05-12 04:50:18', '2020-05-12 04:50:27', 1, 1, 1),
(6, 'N2', 1, 11, 5, 20000.00, 0, '2020-05-12 04:58:07', '2020-08-05 21:44:47', 1, 1, 1),
(7, 'X1', 2, 1, 2, 15000.00, 1, '2020-05-12 05:08:48', '2020-05-12 05:27:48', 1, 1, 2),
(8, 'X2', 2, 4, 3, 50000.00, 0, '2020-05-12 05:20:19', '2020-05-12 05:53:30', 1, 1, 2),
(9, 'N4', 1, 1, 10, 10000.00, 0, '2020-05-12 05:51:54', '2020-08-05 21:44:51', 1, 1, 1),
(10, 'X5', 2, 1, 4, 50000.00, 1, '2020-05-12 05:53:10', '2020-05-12 05:53:23', 1, 1, 1),
(11, 'N1', 1, 1, 3, 30000.00, 0, '2020-05-12 05:54:21', '2020-07-15 06:21:11', 1, 1, 2),
(12, 'N10', 1, 1, 10, 10000.00, 0, '2020-05-16 03:49:47', '2020-07-15 06:27:06', 1, 1, 1),
(13, '1', 1, 1, -2, 189.00, 0, '2020-07-07 11:16:59', '2020-07-07 11:17:46', 1, 1, 1),
(14, 'N1', 1, 1, 2, 50000.00, 0, '2020-07-07 12:06:56', '2020-07-15 06:27:52', 1, 1, 1),
(15, 'N7', 1, 11, 9, 50000.00, 0, '2020-08-04 22:56:43', '2020-08-05 21:45:12', 1, 1, 1),
(16, 'X7', 2, 11, 2, 40000.00, 1, '2020-08-04 23:03:30', '2020-08-04 23:03:30', 1, 1, NULL),
(17, 'N10', 1, 11, 20, 100000.00, 0, '2020-08-05 21:28:25', '2020-08-05 21:45:15', 1, 1, 1),
(18, 'N11', 1, 11, 10, 50000.00, 1, '2020-08-05 21:33:02', '2020-08-05 21:33:48', 1, 1, 1),
(19, 'N12', 1, 11, 20, 50000.00, 1, '2020-08-05 21:35:03', '2020-08-05 21:44:18', 1, 1, 1),
(20, 'N1', 1, 11, 44, 50000.00, 1, '2020-08-05 21:45:39', '2020-08-05 21:46:05', 1, 1, 1),
(21, 'N5', 1, 5, 40, 60000.00, 1, '2020-08-05 21:47:45', '2020-08-05 21:52:50', 1, 1, 1),
(22, 'N10', 1, 14, 15, 50000.00, 1, '2020-08-06 08:48:21', '2020-08-06 08:49:51', 3, 1, 1),
(23, 'X10', 2, 14, 5, 150000.00, 1, '2020-08-06 08:52:58', '2020-08-06 08:52:58', 1, 1, NULL),
(24, 'N100', 1, 1, 5, 50000.00, 1, '2020-10-04 10:36:33', '2020-10-04 10:36:33', 1, 6, NULL),
(25, 'X100', 2, 1, 40, 60000.00, 1, '2020-10-04 10:38:09', '2020-10-04 10:38:09', 1, 6, NULL),
(26, 'x111', 2, 1, 10, 60000.00, 1, '2020-10-04 10:38:24', '2020-10-04 10:38:24', 1, 6, NULL);

-- 
-- Dumping data for table issue
--
INSERT INTO issue VALUES
(1, 'IS1', 1, 7, 0, '2021-01-20 00:37:04', '2021-01-20 00:37:04', 70000.00),
(2, 'IS2', 1, 7, 0, '2021-01-22 02:17:09', '2021-01-22 02:17:09', 50000.00),
(4, 'Iss1', 1, 7, 1, '2021-01-23 14:01:58', '2021-01-23 14:01:58', 50000.00);

-- 
-- Dumping data for table role
--
INSERT INTO role VALUES
(1, 'admin', 'Admin of system', 1, '2020-04-06 01:27:21', '2020-04-06 01:27:21'),
(2, 'staff', 'Staff of system', 1, '2020-04-06 01:27:21', '2020-04-06 01:27:21'),
(4, 'Admin_PTTK', 'Admin for PTTK', 1, '2020-08-13 22:27:24', '2020-08-13 22:27:24'),
(5, 'Admin_OOP', 'Admin for OOP', 1, '2020-08-13 22:27:36', '2020-08-13 22:27:36');

-- 
-- Dumping data for table menu
--
INSERT INTO menu VALUES
(1, 0, '/product', 'Product', 1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(2, 0, '/stock', 'Inventory', 2, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(3, 0, '/management', 'Management', 3, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(4, 1, '/product-info/list', 'Product Info', 2, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(5, 1, '/category/list', 'Category', 1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(6, 1, '/category/edit', 'Sửa', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(7, 1, '/category/view', 'Xem', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(8, 1, '/category/add', 'Thêm mới', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(9, 1, '/category/save', 'Lưu', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(10, 1, '/category/delete', 'Xoá', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(11, 1, '/product-info/edit', 'Sửa', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(12, 1, '/product-info/view', 'Xem', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(13, 1, '/product-info/add', 'Thêm mới', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(14, 1, '/product-info/save', 'Lưu', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(15, 1, '/product-info/delete', 'Xoá', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(16, 2, '/goods-receipt/list', 'Goods Receipt', 1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(17, 2, '/goods-issue/list', 'Goods Issue', 2, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(18, 2, '/product-in-stock/list', 'Product In Stock', 3, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(19, 2, '/history/list', 'History', 4, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(20, 3, '/user/list', 'Users', 1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(21, 3, '/menu/list', 'Menu', 3, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(22, 3, '/role/list', 'Role', 2, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(23, 3, '/user/save', 'Lưu', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(24, 3, '/user/edit', 'Sửa', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(25, 3, '/user/view', 'Xem', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(26, 3, '/user/add', 'Thêm mới', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(27, 3, '/role/save', 'Lưu', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(28, 3, '/role/edit', 'Sửa', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(29, 3, '/role/view', 'Xem', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(30, 3, '/role/add', 'Thêm mới', -1, 1, '2020-04-06 01:22:46', '2020-04-06 01:22:46'),
(31, 1, '/product-detail/list', 'Product Detail', 3, 1, '2020-04-26 19:30:15', '2020-04-26 19:30:15'),
(32, 1, '/product-detail/edit', 'Sửa', -1, 1, '2020-04-26 19:31:37', '2020-04-26 19:31:37'),
(33, 1, '/product-detail/view', 'Xem', -1, 1, '2020-04-26 19:31:37', '2020-04-26 19:31:37'),
(34, 1, '/product-detail/add', 'Thêm', -1, 1, '2020-04-26 19:31:37', '2020-04-26 19:31:37'),
(35, 1, '/product-detail/save', 'Lưu', -1, 1, '2020-04-26 19:31:37', '2020-04-26 19:31:37'),
(36, 1, '/product-detail/delete', 'Xoá', -1, 1, '2020-04-26 19:31:37', '2020-04-26 19:31:37'),
(37, 0, '/report', 'Báo Cáo', 4, 1, '2020-08-01 23:30:25', '2020-08-01 23:30:25'),
(38, 2, '/vat/list', 'Vat', 5, 1, '2020-08-01 23:30:25', '2020-08-01 23:30:25'),
(39, 2, '/product-done-list/list', 'Product Done', 6, 1, '2020-08-01 23:30:25', '2020-08-01 23:30:25'),
(40, 2, '/product-back-list/list', 'Product Back', 8, 1, '2020-08-02 17:07:32', '2020-08-02 17:07:32'),
(41, 3, '/supplier/list', 'Supplier', 4, 1, '2020-08-02 17:58:25', '2020-08-02 17:58:25'),
(42, 1, '/product-detail-pt/list', 'Product Detail', 4, 1, '2020-08-02 22:43:48', '2020-08-02 22:43:48'),
(43, 2, '/shelf/list', 'Shelf', 12, 1, '2020-08-03 15:58:50', '2020-08-03 15:58:50'),
(44, 2, '/product-done-detail/list', 'Product Done Detail', 7, 1, '2020-08-03 16:39:08', '2020-08-03 16:39:08'),
(45, 2, '/product-back-detail/list', 'Product Back Detail', 9, 1, '2020-08-03 16:39:08', '2020-08-03 16:39:08'),
(46, 2, '/shelfoop/list', 'Shelf', 11, 1, '2020-08-04 22:52:15', '2020-08-04 22:52:15'),
(47, 3, '/menu/permission', 'Menu Permission', -1, 1, '2020-08-05 15:07:49', '2020-08-05 15:07:49'),
(48, 2, '/shelfoop/add', 'Shelf Add', -1, 1, '2020-08-05 15:11:40', '2020-08-05 15:11:40'),
(49, 2, '/shelfoop/edit', 'Edit', -1, 1, '2020-08-05 15:11:41', '2020-08-05 15:11:41'),
(50, 2, '/shelfoop/view', 'View', -1, 1, '2020-08-05 15:11:41', '2020-08-05 15:11:41'),
(51, 2, '/shelfoop/save', 'save', -1, 1, '2020-08-05 15:11:41', '2020-08-05 15:11:41'),
(52, 2, '/shelfoop/delete', 'delete', -1, 1, '2020-08-05 15:11:41', '2020-08-05 15:11:41'),
(53, 2, '/goods-issue/export', 'export is', -1, 1, '2020-08-05 15:13:47', '2020-08-05 15:13:47'),
(54, 2, '/goods-receipt/export', 'export rc', -1, 1, '2020-08-05 15:13:47', '2020-08-05 15:13:47'),
(55, 2, '/goods-receipt/edit', 'edit', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(56, 2, '/goods-receipt/view', 'view', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(57, 2, '/goods-receipt/add', 'adsd', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(58, 2, '/goods-receipt/save', 'save', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(59, 2, '/goods-receipt/delete', 'dele', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(60, 2, '/goods-issue/edit', 'edit', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(61, 2, '/goods-issue/view', 'view', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(62, 2, '/goods-issue/add', 'add', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(63, 2, '/goods-issue/save', 'save', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(64, 2, '/goods-issue/delete', 'dele', -1, 1, '2020-08-05 15:18:54', '2020-08-05 15:18:54'),
(65, 3, '/user/delete', 'dele', -1, 1, '2020-08-05 15:25:38', '2020-08-05 15:25:38'),
(66, 3, '/role/delete', 'dele', -1, 1, '2020-08-05 15:25:38', '2020-08-05 15:25:38'),
(67, 3, '/menu/change-status', 'change', -1, 1, '2020-08-05 15:27:06', '2020-08-05 15:27:06'),
(68, 3, '/supplier/add', 'ad', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(69, 3, '/supplier/edit', 'ed', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(70, 3, '/supplier/view', 'v', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(71, 3, '/supplier/save', 's', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(72, 3, '/supplier/delete', 'd', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(73, 1, '/category/getAll', 'getall', -1, 1, '2020-08-06 01:49:03', '2020-08-06 01:49:03'),
(74, 2, '/goods-receipt/getAll', 'ge', -1, 1, '2020-08-06 02:26:04', '2020-08-06 02:26:04'),
(75, 2, '/goods-issue/getAll', 'ger', -1, 1, '2020-08-06 02:26:04', '2020-08-06 02:26:04'),
(76, 1, '/product-info/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(77, 1, '/product-detail/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(78, 2, '/product-in-stock/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(79, 2, '/history/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(80, 2, '/shelfoop/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(81, 3, '/user/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(82, 3, '/supplier/getAll', 'g', -1, 1, '2020-08-06 02:44:08', '2020-08-06 02:44:08'),
(83, 2, '/vat-detail/list', 'Vat Detail', 5, 1, '2020-08-09 00:48:17', '2020-08-09 00:48:17'),
(84, 2, '/vat-detail/getAll', 'get', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(85, 2, '/issue/list', 'Issue', 10, 1, '2021-01-19 21:33:43', '2021-01-19 21:33:43'),
(86, 2, '/issue-detail/list', 'Issue Detail', 11, 1, '2021-01-19 21:33:43', '2021-01-19 21:33:43'),
(87, 2, '/issue/getAll', 'getAll', -1, 1, '2021-01-19 21:33:43', '2021-01-19 21:33:43'),
(88, 2, '/issue-detail/getAll', 'getAll', -1, 1, '2021-01-19 21:33:43', '2021-01-19 21:33:43'),
(89, 2, '/issue/add', 'add', -1, 1, '2021-01-19 21:33:43', '2021-01-19 21:33:43'),
(90, 2, '/issue/edit', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(91, 2, '/issue/save', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(92, 2, '/issue/delete', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(93, 2, '/issue/view', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(94, 2, '/issue-detail/add', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(95, 2, '/issue-detail/edit', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(96, 2, '/issue-detail/save', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(97, 2, '/issue-detail/delete', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(98, 2, '/issue-detail/view', 'add', -1, 1, '2020-08-10 21:45:24', '2020-08-10 21:45:24'),
(99, 3, '/customer/add', 'ad', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(100, 3, '/customer/edit', 'ed', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(101, 3, '/customer/view', 'v', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(102, 3, '/customer/save', 's', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(103, 3, '/customer/delete', 'd', -1, 1, '2020-08-05 15:28:50', '2020-08-05 15:28:50'),
(104, 3, '/customer/list', 'Customer', 5, 1, '2021-01-21 23:32:19', '2021-01-21 23:32:19');

-- 
-- Dumping data for table vat_detail_temp
--
-- Table inventory_management.vat_detail_temp does not contain any data (it is empty)

-- 
-- Dumping data for table vat_detail
--
INSERT INTO vat_detail VALUES
(1, 1, 5, 3, 10000.00, 0),
(2, 1, 11, 3, 10000.00, 0),
(3, 2, 1, 4, 10000.00, 0),
(4, 3, 14, 7, 70000.00, 0),
(5, 2, 14, 5, 20000.00, 0),
(6, 2, 5, 10, 1000.00, 0),
(7, 5, 9, 2, 100000.00, 0),
(8, 5, 14, 10, 1000.00, 0),
(9, 6, 14, 10, 1000.00, 0),
(10, 6, 1, 5, 2000.00, 0),
(11, 7, 14, 10, 10000.00, 0),
(12, 1, 4, 5, 10000.00, 0),
(28, 1, 1, 2, 1000.00, 0),
(30, 18, 1, 1, 1000.00, 0),
(31, 1, 1, 3, 2000.00, 0),
(32, 19, 1, 3, 2000.00, 0),
(33, 20, 25, 5, 30000.00, 1);

-- 
-- Dumping data for table user_role
--
INSERT INTO user_role VALUES
(1, 1, 1, 1, '2020-04-06 01:40:56', '2020-04-06 01:40:56'),
(2, 2, 2, 1, '2020-04-06 01:50:24', '2020-04-06 01:50:24'),
(5, 3, 2, 1, '2020-08-05 11:19:22', '2020-08-05 13:36:34'),
(6, 4, 2, 1, '2020-08-05 15:54:27', '2020-08-12 16:02:02'),
(7, 5, 2, 1, '2020-08-13 01:26:26', '2020-08-13 01:26:26'),
(8, 6, 5, 1, '2020-08-13 22:27:58', '2020-08-13 22:27:58'),
(9, 7, 4, 1, '2020-08-13 22:28:24', '2020-08-13 22:28:24'),
(10, 8, 1, 1, '2020-12-03 01:50:14', '2020-12-03 01:50:14');

-- 
-- Dumping data for table product_status_detail_temp
--
INSERT INTO product_status_detail_temp VALUES
(923, 'Dell XPS', 'BACK1', 2, 30000.00, 60000.00, 1);

-- 
-- Dumping data for table product_status_detail
--
INSERT INTO product_status_detail VALUES
(1, 1, 5, 2, 0, 10000.00, 5),
(2, 2, 11, 3, 0, 10000.00, 5),
(3, 3, 11, 1, 0, 10000.00, 5),
(4, 1, 1, 3, 0, 10000.00, 5),
(5, 1, 5, 10, 0, 10000.00, 5),
(14, 7, 14, 5, 0, 10000.00, 5),
(15, 7, 1, 2, 0, 10000.00, 5),
(17, 10, 14, 4, 0, 10000.00, 5),
(18, 12, 14, 1, 0, 10000.00, 5),
(19, 13, 9, 2, 0, 10000.00, 5),
(20, 19, 1, 2, 0, 2000.00, 2),
(21, 14, 14, 3, 0, 10000.00, 5),
(22, 15, 14, 8, 0, 10000.00, 5),
(23, 16, 14, 5, 0, 10000.00, 5),
(24, 3, 14, 3, 0, 1000.00, 5),
(43, 19, 1, 2, 0, 2000.00, 1),
(44, 20, 1, 1, 0, 2000.00, 2),
(46, 21, 25, 3, 1, 30000.00, 2),
(47, 24, 25, 2, 1, 30000.00, 3);

-- 
-- Dumping data for table product_in_stock
--
INSERT INTO product_in_stock VALUES
(1, 1, -1, 1, '2020-05-12 02:21:49', '2020-10-04 10:38:24', 50000.00),
(2, 4, 17, 1, '2020-05-12 04:22:50', '2020-05-12 05:53:10', 20000.00),
(3, 11, 70, 1, '2020-08-04 22:56:43', '2020-08-05 21:48:14', 50000.00),
(4, 6, 50, 1, '2020-08-05 21:28:25', '2020-08-05 21:28:25', 100000.00),
(5, 9, 50, 1, '2020-08-05 21:33:03', '2020-08-05 21:33:03', 50000.00),
(6, 8, 50, 1, '2020-08-05 21:35:03', '2020-08-05 21:35:03', 50000.00),
(7, 5, 120, 1, '2020-08-05 21:45:39', '2020-08-05 21:52:50', 60000.00),
(8, 14, 10, 1, '2020-08-06 08:48:21', '2020-08-06 08:52:58', 50000.00);

-- 
-- Dumping data for table product_detail_pt
--
INSERT INTO product_detail_pt VALUES
(1, 5, 1, 0, '2020-08-02 23:43:03', '2021-01-20 01:16:23', 20000.00, '123444', 'InValid', 1, 1000.00, 5),
(2, 14, 10, 0, '2020-08-12 10:28:51', '2020-12-26 01:01:16', 50000.00, '24041412', 'Valid', 1, 1000.00, 5),
(3, 14, 15, 0, '2020-08-13 10:12:02', '2021-01-20 01:16:14', 50000.00, '9999', 'InValid', 1, 1000.00, 5),
(4, 14, 15, 0, '2020-08-13 10:17:57', '2020-08-13 10:17:57', 50000.00, '9992', 'InValid', 1, 1000.00, 6),
(5, 14, 15, 0, '2020-08-13 10:18:24', '2020-08-13 10:18:24', 50000.00, '9993', 'InValid', 1, 1000.00, 6),
(26, 14, 15, 0, '2020-12-30 16:56:39', '2021-01-04 13:12:11', 30000.00, 'ip71836', 'Valid', 1, 10000.00, 6),
(27, 25, 21, 1, '2021-01-23 14:01:20', '2021-01-23 14:01:20', 50000.00, 'D123', 'InValid', 1, 30000.00, 5);

-- 
-- Dumping data for table product_detail
--
INSERT INTO product_detail VALUES
(1, 1, NULL, 10000.00, 1, '2020-04-29 20:36:44', '2020-07-26 15:59:00', 15000.00, 1, '123456', 'InValid', 'A'),
(3, 4, 1, 15000.00, 1, '2020-05-11 23:49:41', '2020-07-26 15:59:02', 20000.00, 1, '123654', 'InValid', 'A'),
(4, 1, 1, 25000.00, 1, '2020-05-12 05:18:14', '2020-08-05 20:53:23', 30000.00, 1, '456', 'Valid', 'A'),
(5, 11, 15, 7142.86, 1, '2020-08-04 23:00:11', '2020-08-06 08:52:32', 20000.00, 1, '45673', 'Valid', 'A'),
(6, 14, 22, 3333.33, 0, '2020-08-06 08:51:17', '2020-08-06 08:51:36', 30000.00, 3, '97655123', NULL, 'A'),
(7, 14, 22, 3333.33, 1, '2020-08-06 08:51:50', '2020-08-06 08:51:50', 30000.00, 3, '7461', 'Valid', 'A');

-- 
-- Dumping data for table issue_detail
--
INSERT INTO issue_detail VALUES
(1, 1, 14, '9993', 0, 50000.00),
(2, 1, 5, '123444', 0, 20000.00),
(3, 2, 14, '9992', 0, 50000.00),
(4, 4, 25, 'D123', 1, 50000.00);

-- 
-- Dumping data for table invoice_temp
--
INSERT INTO invoice_temp VALUES
(829, 1, 'X2', 'Xiaomi Mi 8', 1, 15000.00, '2020-05-16 03:22:33', NULL, NULL, NULL),
(830, 1, 'X1', 'Xiaomi Mi 8', 2, 15000.00, '2020-05-12 05:27:48', NULL, NULL, NULL),
(831, 1, 'X5', 'Xiaomi Mi 8', 4, 50000.00, '2020-05-12 05:53:23', NULL, NULL, NULL),
(832, 1, 'X7', 'BB1', 2, 40000.00, '2020-08-04 23:03:30', NULL, NULL, NULL),
(833, 1, 'X10', 'Iphone 9', 5, 150000.00, '2020-08-06 08:52:58', NULL, NULL, NULL);

-- 
-- Dumping data for table history
--
INSERT INTO history VALUES
(1, 'Add', 1, 1, 1, 10000.00, 1, '2020-04-29 20:36:39', '2020-04-29 20:36:39', NULL),
(2, 'Add', 1, 1, 5, 50000.00, 1, '2020-05-12 02:21:49', '2020-05-12 02:21:49', NULL),
(3, 'Add', 1, 4, 10, 100000.00, 1, '2020-05-12 04:22:50', '2020-05-12 04:22:50', NULL),
(4, 'Add', 1, 4, 3, 100000.00, 1, '2020-05-12 04:33:09', '2020-05-12 04:33:09', NULL),
(5, 'Add', 1, 1, 2, 50000.00, 1, '2020-05-12 04:50:18', '2020-05-12 04:50:18', NULL),
(6, 'Add', 1, 4, 10, 20000.00, 1, '2020-05-12 04:58:08', '2020-05-12 04:58:08', NULL),
(7, 'Add', 2, 1, 1, 15000.00, 1, '2020-05-12 05:08:48', '2020-05-12 05:08:48', NULL),
(8, 'Add', 2, 4, 3, 50000.00, 1, '2020-05-12 05:20:19', '2020-05-12 05:20:19', NULL),
(9, 'Edit', 2, 1, 2, 15000.00, 1, '2020-05-12 05:27:48', '2020-05-12 05:27:48', NULL),
(10, 'Add', 1, 1, 10, 10000.00, 1, '2020-05-12 05:51:54', '2020-05-12 05:51:54', NULL),
(11, 'Add', 2, 4, 3, 50000.00, 1, '2020-05-12 05:53:10', '2020-05-12 05:53:10', NULL),
(12, 'Edit', 2, 1, 4, 50000.00, 1, '2020-05-12 05:53:23', '2020-05-12 05:53:23', NULL),
(13, 'Add', 1, 1, 3, 30000.00, 1, '2020-05-12 05:54:21', '2020-05-12 05:54:21', NULL),
(14, 'Edit', 2, 1, 1, 15000.00, 1, '2020-05-16 03:22:34', '2020-05-16 03:22:34', NULL),
(15, 'Add', 1, 1, 10, 10000.00, 1, '2020-05-16 03:49:47', '2020-05-16 03:49:47', NULL),
(16, 'Add', 1, 1, -2, 189.00, 1, '2020-07-07 11:16:59', '2020-07-07 11:16:59', 1),
(17, 'Add', 1, 1, 2, 50000.00, 1, '2020-07-07 12:06:56', '2020-07-07 12:06:56', 1),
(18, 'Edit', 1, 1, -3, 50000.00, 1, '2020-07-15 06:16:58', '2020-07-15 06:16:58', NULL),
(19, 'Edit', 1, 1, 5, 50000.00, 1, '2020-07-15 06:21:34', '2020-07-15 06:21:34', NULL),
(20, 'Edit', 1, 1, 12, 50000.00, 1, '2020-07-15 06:27:39', '2020-07-15 06:27:39', NULL),
(21, 'Add', 1, 11, 7, 50000.00, 1, '2020-08-04 22:56:43', '2020-08-04 22:56:43', 1),
(22, 'Add', 2, 11, 2, 40000.00, 1, '2020-08-04 23:03:30', '2020-08-04 23:03:30', 1),
(23, 'Edit', 1, 11, 9, 50000.00, 1, '2020-08-04 23:08:02', '2020-08-04 23:08:02', 1),
(24, 'Edit', 1, 11, 6, 50000.00, 1, '2020-08-05 21:04:19', '2020-08-05 21:04:19', 1),
(25, 'Edit', 1, 11, 12, 50000.00, 1, '2020-08-05 21:04:58', '2020-08-05 21:04:58', 1),
(26, 'Edit', 1, 11, 2, 50000.00, 1, '2020-08-05 21:05:25', '2020-08-05 21:05:25', 1),
(27, 'Edit', 1, 11, 5, 20000.00, 1, '2020-08-05 21:16:11', '2020-08-05 21:16:11', 1),
(28, 'Edit', 1, 11, 10, 50000.00, 1, '2020-08-05 21:19:09', '2020-08-05 21:19:09', 1),
(29, 'Add', 1, 6, 50, 100000.00, 1, '2020-08-05 21:28:25', '2020-08-05 21:28:25', 1),
(30, 'Edit', 1, 11, 20, 100000.00, 1, '2020-08-05 21:28:45', '2020-08-05 21:28:45', 1),
(31, 'Edit', 1, 11, 30, 100000.00, 1, '2020-08-05 21:29:18', '2020-08-05 21:29:18', 1),
(32, 'Edit', 1, 11, 20, 100000.00, 1, '2020-08-05 21:31:50', '2020-08-05 21:31:50', 1),
(33, 'Edit', 1, 11, 60, 100000.00, 1, '2020-08-05 21:32:18', '2020-08-05 21:32:18', 1),
(34, 'Edit', 1, 11, 20, 100000.00, 1, '2020-08-05 21:32:31', '2020-08-05 21:32:31', 1),
(35, 'Add', 1, 9, 50, 50000.00, 1, '2020-08-05 21:33:02', '2020-08-05 21:33:02', 1),
(36, 'Edit', 1, 11, 20, 50000.00, 1, '2020-08-05 21:33:23', '2020-08-05 21:33:23', 1),
(37, 'Edit', 1, 11, 10, 50000.00, 1, '2020-08-05 21:33:48', '2020-08-05 21:33:48', 1),
(38, 'Add', 1, 8, 50, 50000.00, 1, '2020-08-05 21:35:03', '2020-08-05 21:35:03', 1),
(39, 'Edit', 1, 11, 20, 50000.00, 1, '2020-08-05 21:44:18', '2020-08-05 21:44:18', 1),
(40, 'Add', 1, 5, 50, 50000.00, 1, '2020-08-05 21:45:39', '2020-08-05 21:45:39', 1),
(41, 'Edit', 1, 11, 44, 50000.00, 1, '2020-08-05 21:46:06', '2020-08-05 21:46:05', 1),
(42, 'Add', 1, 5, 50, 60000.00, 1, '2020-08-05 21:47:45', '2020-08-05 21:47:45', 1),
(43, 'Edit', 1, 11, 20, 60000.00, 1, '2020-08-05 21:48:14', '2020-08-05 21:48:14', 1),
(44, 'Edit', 1, 5, 20, 60000.00, 1, '2020-08-05 21:52:14', '2020-08-05 21:52:14', 1),
(45, 'Edit', 1, 5, 40, 60000.00, 1, '2020-08-05 21:52:50', '2020-08-05 21:52:50', 1),
(46, 'Add', 1, 14, 10, 50000.00, 1, '2020-08-06 08:48:21', '2020-08-06 08:48:21', 1),
(47, 'Edit', 1, 14, 15, 50000.00, 1, '2020-08-06 08:49:51', '2020-08-06 08:49:51', 1),
(48, 'Add', 2, 14, 5, 150000.00, 1, '2020-08-06 08:52:58', '2020-08-06 08:52:58', 1),
(49, 'Add', 1, 1, 5, 50000.00, 1, '2020-10-04 10:36:33', '2020-10-04 10:36:33', 6),
(50, 'Add', 2, 1, 40, 60000.00, 1, '2020-10-04 10:38:09', '2020-10-04 10:38:09', 6),
(51, 'Add', 2, 1, 10, 60000.00, 1, '2020-10-04 10:38:24', '2020-10-04 10:38:24', 6);

-- 
-- Dumping data for table auth
--
INSERT INTO auth VALUES
(1, 1, 1, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(2, 1, 2, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(3, 1, 3, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(4, 1, 4, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(5, 1, 5, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(6, 1, 6, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(7, 1, 7, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(8, 1, 8, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(9, 1, 9, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(10, 1, 10, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(11, 1, 11, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(12, 1, 12, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(13, 1, 13, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(14, 1, 14, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(15, 1, 15, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(16, 1, 16, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(17, 1, 17, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(18, 1, 18, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(19, 1, 19, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(20, 1, 20, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(21, 1, 21, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(22, 1, 22, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(23, 1, 23, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(24, 1, 24, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(25, 1, 25, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(26, 1, 26, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(27, 1, 27, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(28, 1, 28, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(29, 1, 29, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(30, 1, 30, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(172, 1, 31, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(173, 1, 32, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(174, 1, 33, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(175, 1, 34, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(176, 1, 35, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(177, 1, 36, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(178, 1, 37, 1, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(179, 1, 38, 1, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(180, 1, 39, 1, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(181, 1, 40, 1, 1, '2020-08-02 17:07:56', '2020-08-02 17:07:56'),
(182, 1, 41, 1, 1, '2020-08-02 17:58:40', '2020-08-02 17:58:40'),
(183, 1, 42, 1, 1, '2020-08-02 22:43:59', '2020-08-02 22:43:59'),
(184, 1, 43, 1, 1, '2020-08-03 15:59:01', '2020-08-03 15:59:01'),
(185, 1, 44, 1, 1, '2020-08-03 16:39:25', '2020-08-03 16:39:25'),
(186, 1, 45, 1, 1, '2020-08-03 16:39:25', '2020-08-03 16:39:25'),
(187, 1, 46, 1, 1, '2020-08-04 22:52:26', '2020-08-04 22:52:26'),
(188, 1, 47, 1, 1, '2020-08-05 15:08:23', '2020-08-05 15:08:23'),
(189, 1, 48, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(190, 1, 49, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(191, 1, 50, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(192, 1, 51, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(193, 1, 52, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(194, 1, 53, 1, 1, '2020-08-05 15:13:59', '2020-08-05 15:13:59'),
(195, 1, 54, 1, 1, '2020-08-05 15:13:59', '2020-08-05 15:13:59'),
(196, 1, 55, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(197, 1, 56, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(198, 1, 57, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(199, 1, 58, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(200, 1, 59, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(201, 1, 60, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(202, 1, 61, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(203, 1, 62, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(204, 1, 63, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(205, 1, 64, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(206, 1, 65, 1, 1, '2020-08-05 15:25:55', '2020-08-05 15:25:55'),
(207, 1, 66, 1, 1, '2020-08-05 15:25:55', '2020-08-05 15:25:55'),
(208, 1, 67, 1, 1, '2020-08-05 15:27:16', '2020-08-05 15:27:16'),
(209, 1, 68, 1, 1, '2020-08-05 15:29:15', '2020-08-05 15:29:15'),
(210, 1, 69, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(211, 1, 70, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(212, 1, 71, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(213, 1, 72, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(214, 1, 73, 1, 1, '2020-08-06 01:49:16', '2020-08-06 01:49:16'),
(215, 1, 74, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(216, 1, 75, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(217, 1, 76, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(218, 1, 77, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(219, 1, 78, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(220, 1, 79, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(221, 1, 80, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(222, 1, 81, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(223, 1, 82, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(224, 1, 83, 1, 1, '2020-08-09 00:48:27', '2020-08-09 00:48:27'),
(225, 1, 84, 1, 1, '2020-08-10 21:45:42', '2020-08-10 21:45:42'),
(226, 4, 1, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(227, 4, 2, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(228, 4, 3, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(229, 4, 4, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(230, 4, 5, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(231, 4, 6, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(232, 4, 7, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(233, 4, 8, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(234, 4, 9, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(235, 4, 10, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(236, 4, 11, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(237, 4, 12, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(238, 4, 13, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(239, 4, 14, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(240, 4, 15, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(241, 4, 16, 0, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(242, 4, 17, 0, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(243, 4, 18, 0, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(244, 4, 19, 0, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(245, 4, 20, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(246, 4, 21, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(247, 4, 22, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(248, 4, 23, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(249, 4, 24, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(250, 4, 25, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(251, 4, 26, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(252, 4, 27, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(253, 4, 28, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(254, 4, 29, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(255, 4, 30, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(256, 4, 31, 0, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(257, 4, 32, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(258, 4, 33, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(259, 4, 34, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(260, 4, 35, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(261, 4, 36, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(262, 4, 37, 0, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(263, 4, 38, 1, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(264, 4, 39, 1, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(265, 4, 40, 1, 1, '2020-08-02 17:07:56', '2020-08-02 17:07:56'),
(266, 4, 41, 1, 1, '2020-08-02 17:58:40', '2020-08-02 17:58:40'),
(267, 4, 42, 1, 1, '2020-08-02 22:43:59', '2020-08-02 22:43:59'),
(268, 4, 43, 1, 1, '2020-08-03 15:59:01', '2020-08-03 15:59:01'),
(269, 4, 44, 1, 1, '2020-08-03 16:39:25', '2020-08-03 16:39:25'),
(270, 4, 45, 1, 1, '2020-08-03 16:39:25', '2020-08-03 16:39:25'),
(271, 4, 46, 0, 1, '2020-08-04 22:52:26', '2020-08-04 22:52:26'),
(272, 4, 47, 1, 1, '2020-08-05 15:08:23', '2020-08-05 15:08:23'),
(273, 4, 48, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(274, 4, 49, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(275, 4, 50, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(276, 4, 51, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(277, 4, 52, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(278, 4, 53, 1, 1, '2020-08-05 15:13:59', '2020-08-05 15:13:59'),
(279, 4, 54, 1, 1, '2020-08-05 15:13:59', '2020-08-05 15:13:59'),
(280, 4, 55, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(281, 4, 56, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(282, 4, 57, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(283, 4, 58, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(284, 4, 59, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(285, 4, 60, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(286, 4, 61, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(287, 4, 62, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(288, 4, 63, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(289, 4, 64, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(290, 4, 65, 1, 1, '2020-08-05 15:25:55', '2020-08-05 15:25:55'),
(291, 4, 66, 1, 1, '2020-08-05 15:25:55', '2020-08-05 15:25:55'),
(292, 4, 67, 1, 1, '2020-08-05 15:27:16', '2020-08-05 15:27:16'),
(293, 4, 68, 1, 1, '2020-08-05 15:29:15', '2020-08-05 15:29:15'),
(294, 4, 69, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(295, 4, 70, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(296, 4, 71, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(297, 4, 72, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(298, 4, 73, 1, 1, '2020-08-06 01:49:16', '2020-08-06 01:49:16'),
(299, 4, 74, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(300, 4, 75, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(301, 4, 76, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(302, 4, 77, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(303, 4, 78, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(304, 4, 79, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(305, 4, 80, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(306, 4, 81, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(307, 4, 82, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(308, 4, 83, 1, 1, '2020-08-09 00:48:27', '2020-08-09 00:48:27'),
(309, 4, 84, 1, 1, '2020-08-10 21:45:42', '2020-08-10 21:45:42'),
(310, 5, 1, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(311, 5, 2, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(312, 5, 3, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(313, 5, 4, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(314, 5, 5, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(315, 5, 6, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(316, 5, 7, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(317, 5, 8, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(318, 5, 9, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(319, 5, 10, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(320, 5, 11, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(321, 5, 12, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(322, 5, 13, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(323, 5, 14, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(324, 5, 15, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(325, 5, 16, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(326, 5, 17, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(327, 5, 18, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(328, 5, 19, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(329, 5, 20, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(330, 5, 21, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(331, 5, 22, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(332, 5, 23, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(333, 5, 24, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(334, 5, 25, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(335, 5, 26, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(336, 5, 27, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(337, 5, 28, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(338, 5, 29, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(339, 5, 30, 1, 1, '2020-04-06 01:44:06', '2020-04-06 01:44:06'),
(340, 5, 31, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(341, 5, 32, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(342, 5, 33, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(343, 5, 34, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(344, 5, 35, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(345, 5, 36, 1, 1, '2020-04-26 19:32:49', '2020-04-26 19:32:49'),
(346, 5, 37, 0, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(347, 5, 38, 0, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(348, 5, 39, 0, 1, '2020-08-01 23:30:51', '2020-08-01 23:30:51'),
(349, 5, 40, 0, 1, '2020-08-02 17:07:56', '2020-08-02 17:07:56'),
(350, 5, 41, 1, 1, '2020-08-02 17:58:40', '2020-08-02 17:58:40'),
(351, 5, 42, 0, 1, '2020-08-02 22:43:59', '2020-08-02 22:43:59'),
(352, 5, 43, 0, 1, '2020-08-03 15:59:01', '2020-08-03 15:59:01'),
(353, 5, 44, 0, 1, '2020-08-03 16:39:25', '2020-08-03 16:39:25'),
(354, 5, 45, 0, 1, '2020-08-03 16:39:25', '2020-08-03 16:39:25'),
(355, 5, 46, 1, 1, '2020-08-04 22:52:26', '2020-08-04 22:52:26'),
(356, 5, 47, 1, 1, '2020-08-05 15:08:23', '2020-08-05 15:08:23'),
(357, 5, 48, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(358, 5, 49, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(359, 5, 50, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(360, 5, 51, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(361, 5, 52, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(362, 5, 53, 1, 1, '2020-08-05 15:13:59', '2020-08-05 15:13:59'),
(363, 5, 54, 1, 1, '2020-08-05 15:13:59', '2020-08-05 15:13:59'),
(364, 5, 55, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(365, 5, 56, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(366, 5, 57, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(367, 5, 58, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(368, 5, 59, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(369, 5, 60, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(370, 5, 61, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(371, 5, 62, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(372, 5, 63, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(373, 5, 64, 1, 1, '2020-08-05 15:19:46', '2020-08-05 15:19:46'),
(374, 5, 65, 1, 1, '2020-08-05 15:25:55', '2020-08-05 15:25:55'),
(375, 5, 66, 1, 1, '2020-08-05 15:25:55', '2020-08-05 15:25:55'),
(376, 5, 67, 1, 1, '2020-08-05 15:27:16', '2020-08-05 15:27:16'),
(377, 5, 68, 1, 1, '2020-08-05 15:29:15', '2020-08-05 15:29:15'),
(378, 5, 69, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(379, 5, 70, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(380, 5, 71, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(381, 5, 72, 1, 1, '2020-08-05 15:29:16', '2020-08-05 15:29:16'),
(382, 5, 73, 1, 1, '2020-08-06 01:49:16', '2020-08-06 01:49:16'),
(383, 5, 74, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(384, 5, 75, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(385, 5, 76, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(386, 5, 77, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(387, 5, 78, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(388, 5, 79, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(389, 5, 80, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(390, 5, 81, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(391, 5, 82, 1, 1, '2020-08-06 02:45:55', '2020-08-06 02:45:55'),
(392, 5, 83, 0, 1, '2020-08-09 00:48:27', '2020-08-09 00:48:27'),
(393, 5, 84, 1, 1, '2020-08-10 21:45:42', '2020-08-10 21:45:42'),
(394, 4, 85, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(395, 4, 86, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(396, 4, 87, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(397, 4, 88, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(398, 4, 89, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(399, 4, 90, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(400, 4, 91, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(401, 4, 92, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(402, 4, 93, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(403, 4, 94, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(404, 4, 95, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(405, 4, 96, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(406, 4, 97, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(407, 4, 98, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(408, 4, 99, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(409, 4, 100, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(410, 4, 101, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(411, 4, 102, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(412, 4, 103, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09'),
(413, 4, 104, 1, 1, '2020-08-05 15:12:09', '2020-08-05 15:12:09');

--
-- Set default database
--
USE inventory_management;

--
-- Drop trigger `after_vat_detail_insert`
--
DROP TRIGGER IF EXISTS after_vat_detail_insert;

--
-- Drop trigger `after_vat_detail_update`
--
DROP TRIGGER IF EXISTS after_vat_detail_update;

--
-- Drop trigger `after_vat_update`
--
DROP TRIGGER IF EXISTS after_vat_update;

--
-- Drop trigger `after_product_status_list_update`
--
DROP TRIGGER IF EXISTS after_product_status_list_update;

--
-- Drop trigger `after_product_status_detail_insert`
--
DROP TRIGGER IF EXISTS after_product_status_detail_insert;

--
-- Drop trigger `after_product_status_detail_update`
--
DROP TRIGGER IF EXISTS after_product_status_detail_update;

--
-- Drop trigger `after_product_detail_update`
--
DROP TRIGGER IF EXISTS after_product_detail_update;

--
-- Drop trigger `after_issue_detail_insert`
--
DROP TRIGGER IF EXISTS after_issue_detail_insert;

--
-- Drop trigger `after_issue_detail_update`
--
DROP TRIGGER IF EXISTS after_issue_detail_update;

--
-- Set default database
--
USE inventory_management;

DELIMITER $$

--
-- Create trigger `after_vat_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_vat_update
AFTER UPDATE
ON vat
FOR EACH ROW
BEGIN
  IF new.active_flag = 0 THEN

    UPDATE product_status_list
    SET active_flag = 0
    WHERE vat_id = new.id;
    UPDATE vat_detail
    SET active_flag = 0
    WHERE vat_id = new.ID;


  END IF;
END
$$

--
-- Create trigger `after_product_status_detail_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_product_status_detail_insert
AFTER INSERT
ON product_status_detail
FOR EACH ROW
BEGIN
  UPDATE product_status_list psl
  SET price = price + (new.qty * new.price_one)
  WHERE ID = new.product_status_list_id;
  IF ((SELECT
        psl.type
      FROM product_status_list psl
      WHERE psl.id = new.product_status_list_id) = 1) THEN
    UPDATE product_info pi
    SET PI.qty = PI.qty + new.qty
    WHERE PI.id = new.product_id;
  END IF;
END
$$

--
-- Create trigger `after_product_status_detail_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_product_status_detail_update
AFTER UPDATE
ON product_status_detail
FOR EACH ROW
BEGIN
  IF ((SELECT
        active_flag
      FROM product_status_list
      WHERE ID = new.product_status_list_id) = 1) THEN
    IF new.active_flag = 0 THEN
      UPDATE product_status_list
      SET price = price - (old.price_one * old.qty)
      WHERE ID = new.product_status_list_id;
      IF ((SELECT
            psl.type
          FROM product_status_list psl
          WHERE psl.id = new.product_status_list_id) = 1) THEN
        UPDATE product_info pi
        SET PI.qty = PI.qty - new.qty
        WHERE PI.id = new.product_id;
      END IF;
    ELSEIF (old.price_one * old.qty) <> (new.price_one * new.qty) THEN
      UPDATE product_status_list
      SET price = price - (old.price_one * old.qty) + (new.price_one * new.qty)
      WHERE ID = new.product_status_list_id;
      IF ((SELECT
            psl.type
          FROM product_status_list psl
          WHERE psl.id = new.product_status_list_id) = 1) THEN
        UPDATE product_info pi
        SET PI.qty = PI.qty - old.qty
        WHERE PI.id = old.product_id;
        UPDATE product_info pi
        SET PI.qty = PI.qty + new.qty
        WHERE PI.id = new.product_id;
        UPDATE product_status_detail psd
        SET psd.qty_rest = psd.qty_rest - (new.qty - old.qty)
        WHERE psd.id = new.id
        AND psd.product_id = new.product_id;
      END IF;
    END IF;
  END IF;
END
$$

--
-- Create trigger `after_product_status_list_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_product_status_list_update
AFTER UPDATE
ON product_status_list
FOR EACH ROW
BEGIN
  IF new.active_flag = 0 THEN

    UPDATE product_status_detail
    SET active_flag = 0
    WHERE product_status_list_id = new.id;
  END IF;

END
$$

--
-- Create trigger `after_product_detail_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_product_detail_update
AFTER UPDATE
ON product_detail_pt
FOR EACH ROW
BEGIN
  IF (new.active_flag = 0) THEN
    IF (new.status = 'Valid') THEN
      UPDATE shelf
      SET qty = qty - 1
      WHERE ID = new.shelf_id;
    END IF;
  ELSEIF (new.status <> old.status) THEN
    IF (new.status = 'Valid') THEN
      UPDATE shelf
      SET qty = qty + 1
      WHERE ID = new.shelf_id;
    ELSE
      UPDATE shelf
      SET qty = qty - 1
      WHERE ID = new.shelf_id;
    END IF;
  END IF;
END
$$

--
-- Create trigger `after_vat_detail_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_vat_detail_insert
AFTER INSERT
ON vat_detail
FOR EACH ROW
BEGIN
  UPDATE vat
  SET price = price + (new.price_one * new.qty)
  WHERE ID = new.vat_id;
END
$$

--
-- Create trigger `after_vat_detail_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_vat_detail_update
AFTER UPDATE
ON vat_detail
FOR EACH ROW
BEGIN
  IF ((SELECT
        active_flag
      FROM vat
      WHERE ID = new.vat_id) = 1) THEN
    IF new.active_flag = 0 THEN
      UPDATE vat
      SET price = price - (old.price_one * old.qty)
      WHERE ID = new.vat_id;
    ELSEIF (old.price_one * old.qty) <> (new.price_one * new.qty) THEN
      UPDATE vat
      SET price = price - (old.price_one * old.qty) + (new.price_one * new.qty)
      WHERE ID = new.vat_id;
    ELSEIF (old.price_one) <> (new.price_one) THEN
      UPDATE product_detail_pt pdp
      SET pdp.price_in = new.price_one
      WHERE pdp.product_status_list_id = (SELECT
          psl.id
        FROM product_status_list psl
        WHERE psl.vat_id = new.vat_id)
      AND pdp.product_id = new.product_id;
      UPDATE product_status_detail psd
      SET psd.price_one = new.price_one
      WHERE psd.product_status_list_id = (SELECT
          psl.id
        FROM product_status_list psl
        WHERE psl.vat_id = new.vat_id)
      AND psd.product_id = new.product_id;
    END IF;
  END IF;
END
$$

--
-- Create trigger `after_issue_detail_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_issue_detail_insert
AFTER INSERT
ON issue_detail
FOR EACH ROW
BEGIN
  UPDATE issue i
  SET i.price = i.price + new.price_one
  WHERE i.id = new.issue_id;
  UPDATE product_info pi
  SET PI.qty = PI.qty - 1
  WHERE PI.id = new.product_id;
  UPDATE product_detail_pt pdp
  SET pdp.status = 'InValid'
  WHERE pdp.product_id = new.product_id
  AND pdp.code = new.imei;
END
$$

--
-- Create trigger `after_issue_detail_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER after_issue_detail_update
AFTER UPDATE
ON issue_detail
FOR EACH ROW
BEGIN
  IF ((SELECT
        active_flag
      FROM issue i
      WHERE i.id = new.issue_id) = 1) THEN
    IF new.active_flag = 0 THEN
      UPDATE issue
      SET price = price - (old.price_one)
      WHERE ID = new.issue_id;
      UPDATE product_info pi
      SET PI.qty = PI.qty + 1
      WHERE PI.id = old.product_id;
      UPDATE product_detail_pt pdp
      SET pdp.status = 'Valid'
      WHERE pdp.product_id = new.product_id
      AND pdp.code = new.imei;
    ELSEIF ((old.price_one) <> (new.price_one)
      OR old.product_id <> new.product_id
      OR old.imei <> new.imei) THEN
      UPDATE issue
      SET price = price - (old.price_one) + (new.price_one)
      WHERE ID = new.issue_id;
      UPDATE product_info pi
      SET PI.qty = PI.qty + 1
      WHERE PI.id = old.product_id;
      UPDATE product_info pi
      SET PI.qty = PI.qty - 1
      WHERE PI.id = new.product_id;
      UPDATE product_detail_pt pdp
      SET pdp.status = 'Valid'
      WHERE pdp.product_id = old.product_id
      AND pdp.code = old.imei;
      UPDATE product_detail_pt pdp
      SET pdp.status = 'InValid'
      WHERE pdp.product_id = new.product_id
      AND pdp.code = new.imei;
    END IF;
  END IF;
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;